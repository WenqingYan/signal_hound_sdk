Release Version Notes for the BB60D/C/A Programming Interface

Support contact: support@signalhound.com

- BB_API Version 5.0.5 (6/27/2022)
* Bug fix: Fixed issues with I/Q streaming and real-time when using center frequency below 30MHz.

- BB_API Version 5.0.4 (6/15/2022)
* Bug fix: Seg fault fix for bbGetSerialNumberList and bbOpenDevice functions on Linux.
* Bug fix: Fixed issue with BB60D scalar network analysis sweeps between 16-30MHz.

- BB_API Version 5.0.3 (6/6/2022)
* Bug fix: Fixed issue when performing real-time and I/Q streaming measurements between 30-40MHz center frequency with the BB60D.

- BB_API Version 5.0.2 (6/1/2022)
* Official support for the BB60D.
  - New UART functions
  - Updated port definitions for I/O configuration.
* Added bbConfigureIQTriggerSentinel() function.
* Added bbConfigureRefLevel() and bbConfigureGainAtten() functions
* Can now pass NULL to bbFetchTrace functions for sweep array parameters.
* Deprected bbConfigureLevel() and bbConfigureGain() functions.
  - Use the new bbConfigureRefLevel() and bbConfigureGainAtten() functions instead.
* Bug fix: Spans <= 200kHz on Linux should now work.

- BB_API Version 5.0.0/5.0.1
* Internal release.

- BB_API Version 4.3.5 (5/14/2021)
* The bbSyncCPUtoGPS function now searches for "RMC" in the NMEA sentences instead of "$GPRMC".
  This should allow more compatibility with Glonass and Galileo systems.

- BB_API Version 4.3.4 (4/14/2021)
* Bug fix: Fixed issue with real-time mode on BB60A. Certain configurations returned invalid sweeps and persistence frames.
* Bug fix: Fixed issue with certain sweep configurations that caused the spectrum to be shifted by 1 bin.
           Affects BB60C-2 devices.
* Bug fix: Fixed issue where the last bin in a sweep would sometimes be invalid.

- BB_API Version 4.3.2 (3/10/2021)
* More consistent and better reporting of PC side sample loss when I/Q streaming. 
  For more information see the sample loss parameter description in the API manual for the get I/Q functions.

- BB_API Version 4.3.1 (2/17/2021)
* Introduced new 10MHz BNC port 1 flags BB_PORT1_10MHz_USE_INT, BB_PORT1_10MHZ_REF_OUT, and BB_PORT1_10MHZ_REF_IN.
  These flags replace the old reference control flags and provide more control on when to apply certain frequence correction
    factors. The proper use of these flags will allow 0ppm measurements to be made when an external generator or similar
    is using the 10MHz reference from the BB60C.
  BB_PORT1_INT_REF_OUT and BB_PORT1_EXT_REF_IN have been deprecated but will continue to work the same as before.
  See API manual (function bbConfigureIO) for more information.

- BB_API Version 4.3.0 (7/21/2020)
* bbFetchRealTimeFrame function parameter list has changed.
* Min detector sweeps now available through the bbFetchRealTimeFrame function.

- BB_API Version 4.2.0 (4/10/2019)
* Added data type selection for I/Q acquisitions. Defaults to 32-bit complex floats. Can also choose 16-bit complex shorts.
* I/Q acquisition functions now pass void* for the I/Q buffer. Should not affect existing codebases that continue to use 32-bit floats for I/Q (default).
* Bug fix: bbSyncCPUtoGPS() should now work with COM ports 10 and above.
* bbSyncCPUtoGPS now properly returns the not supported error on Linux operating systems.

- BB_API Version 4.1.0 (1/18/2019)
* Added bbConfigureIQCenter() function as a way to more simply set the center frequency for I/Q acquisitions.
* Bug fix: Devices with a specific set of adjustment values would fail in I/Q streaming modes. This has been resolved.

- BB_API Version 4.0.3 (12/14/2018)
* Bug fix: Fixed audio playback issue for BB60C-2 for certain frequency bands.

- BB_API Version 4.0.2 (9/25/2018)
* Improved IQ streaming reconfiguration time for Windows and Linux builds.

- BB_API Version 4.0.1 (9/14/2018)
* Support for firmware version 9 which improves USB transfer reliability on newer Windows 10 computers.
* Bug fix: First I/Q acquisition after configuring I/Q will now return a valid time stamp.

- BB_API Version 4.0.0 (8/28/2018)
* Initial support for BB60C-2, an upcoming minor hardware revision for the BB60C. Using the updated API will be required for interfacing these devices. The serial number range for the BB60C-2 devices is tentatively between [1823xxxx - 3999xxxx].
* In addition to requiring API version 4.0.0 for the BB60C-2 devices, the latest Signal Hound USB 3.0 driver installation will be required. This driver is automatically installed during Spike installation, versions 3.2.3 and later.
* Increase in DLL size due to updated third party static libraries.
* Removed deprecated functions 
  - bbFetchRaw: use bbGetIQ instead.
  - bbConfigureWindow: use bbConfigureSweepCoupling instead.
  - bbQueryTimestamp: use bbGetIQ instead.

- BB_API Version 3.1.1 (6/21/2018)
* Bug fix: Narrow span low frequency (< 500kHz CF) sweeps were not working properly.

- BB_API Version 3.1.0 (5/8/2018)
* Added alpha frame component to real-time frame acquisitions. Used for persistence decay.
  bbFetchRealTimeFrame() function prototype changed to accomodate new functionality.

- BB_API Version 3.0.21 (3/16/2018)
* Bug fix: Low frequency TG sweeps.
* Bug fix: GPS time stamping fixes for PCs that are not synchronized to a time server, or customers who have manually offset their system clock. GPS time stamping should report proper times now.
* Bug fix: Sweeps with a certain span/RBW combination were not operating properly.

- BB_API Version 3.0.20 (8/2/2017)
* Resolved some audio issues with SSB and CW/

- BB_API Version 3.0.19 (4/2/2017)
* Real-time mode issue resolved for BB60A units below 1GHz.

- BB_API Version 3.0.18 (2/8/2017)
* RBW restrictions lifted for Nuttall windows for sweep mode and real-time. Can now select arbitrary values for RBW when the Nuttall RBW shape is selected.
* Added the bbGetIQUnpacked() function to aid in non-C programming language bindings.

- BB_API Version 3.0.17 (11/21/2016)
* Resolved issues relating to multiple device GPS time stamping. 

- BB_API Version 3.0.16 (11/10/2016)
* IQ streaming now uses direct input between 10-16 MHz center frequency.
* Resolved aliasing issues relating to direct input IQ streaming. (<16 MHz center frequency)
* Integration for TG timebase adjustments through the Signal Hound Calibration software.

- BB_API Version 3.0.15 (10/11/2016)
* Addressed performance regression on IQ streaming.

- BB_API Version 3.0.14 (8/26/2016)
* Bug fixes related to audio streaming.
* Narrow span sweeps between 10MHz-16MHz no longer are succeptible to IF overload conditions.
* Bug fixes for real-time analysis in band zero.
* Marked bbFetchRaw() and bbQueryTimestamp() as deprecated. This functionality has been superceded by the
  bbGetIQ() function. 
  For customers still wanting access to the direct uncalibrated IF, you can still use bbFetchRaw(). 
  If the device is configured for IQ streaming, the bbFetchRaw() function is routed to bbGetIQ().
* Bug fixes related to IQ streaming and external triggers.

- BB_API Version 3.0.13 (6/1/2016)
* I/Q streaming below 10 MHz now utilizes the direct conversion IF band. 
  This improves RF performance on I/Q measurements below 10 MHz.
* Increased max sweep acquisition time to 1000ms.
* Added new bbGetIQ() function, which provides more flexibility for IQ data streaming.
  See the API manual for more information on this function.

- BB_API Version 3.0.12 (3/2/2016)
* Exisiting programs will continue to compile without any changes.
* Changed rbwType parameter name in bbConfigureSweepCoupling function to rbwShape.
* Changed the notion of native/non-native RBWs to Nuttall/Flattop respectively. 
* Added the ability to specify a Gaussian 6dB bandwidth RBW shape through the rbwShape parameter.
* Added new more descriptive #defines for these new rbwShapes.
* bbConfigureWindow() is now deprecated. Moving forward the only windows the API will support are the ones 
  available through the bbCOnfigureSweepCoupling functions, which are Flattop, Nuttall, and Gaussian.
* Removed old #defines from previously removed functions.

- BB_API Version 3.0.11 (2/4/2016)
* bbQueryStreamInfo() now properly returns the internally used IF bandwidth if it was clamped based on sample rate.
* Fixed frequency error that appeared in certain circumstances above 3GHz in zero-span mode.
* Narrow band sweeps between 5.6 and 5.8 GHz should now operate properly.

- BB_API Version 3.0.9 (11/9/2015)
* Added functions for configuring the real-time overlap rate and retrieving the probability of intercept in real-time mode.
* Added functions for configuring the TG44/TG124 timebase reference.

- BB_API Version 3.0.8
* Added tracking generator support for the BB60A. (With firmware update 5)

- BB_API Version 3.0.7 (9/8/2015)
* Detects USB transfer issues when paired with the latest Firmware update. Simply discards sweeps and measurements. Only works when paired with updated FPGA/firmware. Contact Signal Hound for more information.
* Improved stability so that low RBW, narrow span sweeps do not cause the API to lockup in high CPU scenarios. 
* Added additional decimation values for I/Q streaming for the BB60C and BB60A. Can now decimate in powers of two from 40MS/s to 4.882kS/s. 

- BB_API Version 3.0.6 (7/22/2015)
* BB60C streaming tune speed has been substantially increased. Required API version 3.0.6 and Firmware version 6. Only for BB60C models.
* Added bbGetTgFreqAmpl function to retrieve last set TG output configuration.
* Fixed bug with audio IF bandwidth selection.

- BB_API Version 3.0.5
* Compiled for 64-bit Linux operating systems.
* Should now detect BB60 devices when non Signal Hound cypress devices are connected to the PC.

- BB_API Version 3.0.4
* Added tracking generator support for the BB60C, firmware version 5.

- BB_API Version 3.0.2
* New real-time functionality exposed through API

- BB_API Version 3.0.1
* Removed deprecated functions that were present from the original BB60A API. The functions were deprecated on the release of the BB60C.

- BB_API Version 2.0.6
* Can now target BB60 devices by serial number when opening. 

- BB_API Version 2.0.5
* Deprecated a number of redundant functions. Most notably, the zero-span
  functionality, time-gated sweeps, and the raw-sweep functionality. This 
  functionality will be removed in a future release. Please contact us if
  this is undesired.

- BB_API Version 2.0.3
* Fixed issue which arises when attenuation is manually set to 30dB
* Fixed IQ bandwidth issues with BB60A. The bandwidth set during
  bbConfigureIQ() would not get configured properly.
* The user no longer needs to call bbFetchRaw() fast enough to keep up with the data.
  If the user does not though, data collected longer than 3/4 seconds prior to the last
  bbFetchRaw() call will be dropped.

- BB_API version 2.0.1
* Improved the performance of audio demodulation, expect a CPU reduction of 50% on average
* Calibration improved at higher internal temperatures (+40C)

- BB_API version 1.2.4
* The API and software more gracefully handles a situation in which the system falls behind in Real-time and
  streaming modes.
* The API now has more robust error reporting on out of memory conditions. One can now expect the API to
  return error messages when the API has run out of memory during the bbInitiate() routine. Out of memory
  conditions are most common when using combinations of large spans and low RBW/VBW in the BB_SWEEPING mode.
* Added two new USB error reporting conditions.

- BB_API version 1.2.2
* Issues revolving around the streaming time stamps have been corrected. Time stamps are now
  more accurate when streaming.
* The API now allows you to retrieve streaming IF/IQ data as 16-bit signed shorts in addition to 32-bit
  float point digital samples. By retrieving digital samples as 16-bit signed shorts the API does not
  need to perform the scaling and conversion to 32-bit floats. This may help reduce computational load
  in certain situations.
* The interface to the raw sweep loop functionality has been improved. Read the API manual to learn
  about the changes to raw sweep loop.

- BB_API version 1.1.0
* Many codebase changes have taken place to prepare for future broadband products
* The API returns more meaningful errors/strings on configuration routines.
* Header file/Library/.dll have been renamed to be device neutral.
* bbUSBTimeout() has been removed from the API.
* Device specific Limits have been added to the header file.
* The API .dll should no longer throw OpenMP errors on VS2010 and later.
* bbQueryStreamingCenter() has been added. Assists in the process of downconversion for
  our 20MHz IF data stream. Check out the API manual for more information. (Under raw-data mode)